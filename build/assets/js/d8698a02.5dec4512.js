(self.webpackChunkopentezos=self.webpackChunkopentezos||[]).push([[218],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7705:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var a=n(7294),r="root_2W3B",o=function(e){var t=e.children;return a.createElement("div",{className:r},t)}},4623:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i=(n(7705),{id:"truffle_compilation_migration",title:"Smart contract deployment with Truffle",authors:"Benjamin Pilia"}),l={unversionedId:"dapp/truffle_compilation_migration",id:"dapp/truffle_compilation_migration",isDocsHomePage:!1,title:"Smart contract deployment with Truffle",description:"The first step to creating a Dapp is to deploy a smart contract onto a Tezos network, whether for testing or real-life use. There are several ways to do this, like using the Tezos cli.",source:"@site/docs/dapp/truffle_compilation_migration.md",sourceDirName:"dapp",slug:"/dapp/truffle_compilation_migration",permalink:"/dapp/truffle_compilation_migration",editUrl:"https://github.com/octo-technology/OpenTezos/tree/main/docs/dapp/truffle_compilation_migration.md",version:"current",lastUpdatedBy:"Theotime-Akeare",lastUpdatedAt:1623661708,formattedLastUpdatedAt:"6/14/2021",frontMatter:{id:"truffle_compilation_migration",title:"Smart contract deployment with Truffle",authors:"Benjamin Pilia"},sidebar:"docs",previous:{title:"Introduction",permalink:"/dapp"},next:{title:"Taquito",permalink:"/dapp/taquito"}},s=[{value:"Initializing an empty project",id:"initializing-an-empty-project",children:[]},{value:"Using a <em>Truffle</em> Box",id:"using-a-truffle-box",children:[]},{value:"Project Structure overview",id:"project-structure-overview",children:[]},{value:"Main <em>Truffle</em> commands",id:"main-truffle-commands",children:[]},{value:"Compiling smart contracts with <em>Truffle</em>",id:"compiling-smart-contracts-with-truffle",children:[{value:"About ligo smart contracts",id:"about-ligo-smart-contracts",children:[]},{value:"<em>Truffle</em> artifacts",id:"truffle-artifacts",children:[]},{value:"Hand-ons:",id:"hand-ons",children:[]}]},{value:"Deploying smart contracts with <em>Truffle</em>",id:"deploying-smart-contracts-with-truffle",children:[{value:"Using an account for the deployment",id:"using-an-account-for-the-deployment",children:[]},{value:"Adding a network",id:"adding-a-network",children:[]},{value:"Writing the migration scripts",id:"writing-the-migration-scripts",children:[]},{value:"Hand-ons",id:"hand-ons-2",children:[]},{value:"Running a migration",id:"running-a-migration",children:[]}]},{value:"Interacting with a deployed contract",id:"interacting-with-a-deployed-contract",children:[]}],c={toc:s};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The first step to creating a Dapp is to deploy a smart contract onto a Tezos network, whether for testing or real-life use. There are several ways to do this, like using the Tezos cli.  "),(0,o.kt)("p",null,"However, during development, the smart contracts and the associated storage are likely to change: new field, field removal, structure change. For each change, a new deployment must be done. "),(0,o.kt)("p",null,"Thus, the way that the contract is deployed will change accordingly, especially the initial storage. A minimal change in the storage definition can make the next deployment extremely tiresome when using Tezos cli."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Truffle")," solves this difficulty. This tool uses scripts to perform smart contract deployments: thanks to a cli and a few configuration files, they are easier\nand faster."),(0,o.kt)("p",null,"In this chapter, we will deploy the Raffle smart contract, written in LIGO, onto a testnet, with the use of ",(0,o.kt)("em",{parentName:"p"},"Truffle"),"."),(0,o.kt)("h1",{id:"about-the-truffle-suite"},"About The ",(0,o.kt)("em",{parentName:"h1"},"Truffle")," Suite"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Truffle")," is part of a suite of tools that make it easier to deploy written smart contracts onto a blockchain,\ncalled ",(0,o.kt)("em",{parentName:"p"},"The Truffle Suite"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Truffle"),": smart contract compilation and deployment onto a network"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Ganache"),": easy blockchain network setup and configuration"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"drizzle"),": is used to easily write front-end applications, which interact with a deployed smart contract."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Truffle teams"),": is an integration and smart contracts monitoring tool")),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"Truffle")," Suite is not available for all blockchains. It supports:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ethereum"),(0,o.kt)("li",{parentName:"ul"},"Tezos"),(0,o.kt)("li",{parentName:"ul"},"Corda"),(0,o.kt)("li",{parentName:"ul"},"Quorum"),(0,o.kt)("li",{parentName:"ul"},"Hyperledger Fabric")),(0,o.kt)("p",null,"Only ",(0,o.kt)("em",{parentName:"p"},"Truffle")," and ",(0,o.kt)("em",{parentName:"p"},"Ganache")," (still in beta) are available for Tezos."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Truffle")," takes Ligo files, compiles them and deploys them on any Tezos network with a single command. It\ndoes not support Smartpy scripts nor Morlaix scripts."),(0,o.kt)("h1",{id:"truffle-installation"},(0,o.kt)("em",{parentName:"h1"},"Truffle")," Installation"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Truffle")," can be installed with a docker or npm. The easiest way is to use ",(0,o.kt)("em",{parentName:"p"},"Truffle")," from the npm package."),(0,o.kt)("p",null,"You'll need to have NodeJS v8.9.4 or later on your machine."),(0,o.kt)("p",null,"Open a terminal and run:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"$ npm install -g truffle@tezos")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Truffle")," will be installed globally (-g option)."),(0,o.kt)("h1",{id:"setting-up-a-truffle-project"},"Setting-up a ",(0,o.kt)("em",{parentName:"h1"},"Truffle")," project"),(0,o.kt)("p",null,"As described below, ",(0,o.kt)("em",{parentName:"p"},"Truffle")," is working with configuration files and scripts, which must be located in specific repositories.\nYou can set up your ",(0,o.kt)("em",{parentName:"p"},"Truffle")," project from scratch, but it is easier to use one of the two ways provided by ",(0,o.kt)("em",{parentName:"p"},"Truffle"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Initializing an empty project"),(0,o.kt)("li",{parentName:"ol"},"Using a ",(0,o.kt)("em",{parentName:"li"},"Truffle")," Box")),(0,o.kt)("p",null,"These two methods generate the project structure and the configuration files (with predefined settings like accounts, networks...): the ",(0,o.kt)("em",{parentName:"p"},"Truffle")," box comes with three smart contract examples."),(0,o.kt)("h2",{id:"initializing-an-empty-project"},"Initializing an empty project"),(0,o.kt)("p",null,"Create a folder for your ",(0,o.kt)("em",{parentName:"p"},"Truffle")," project, and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir tezos-example\n$ cd tezos-example\n$ truffle init\n")),(0,o.kt)("h2",{id:"using-a-truffle-box"},"Using a ",(0,o.kt)("em",{parentName:"h2"},"Truffle")," Box"),(0,o.kt)("p",null,"A ",(0,o.kt)("em",{parentName:"p"},"Truffle")," box is a project already set up, easily and quickly adjustable to the specific needs of a project.\nThey can be launched instantly and modified with little work. ",(0,o.kt)("em",{parentName:"p"},"Truffle")," provides users with a global boxes repository:\n","[https://www.trufflesuite.com/boxes]"),(0,o.kt)("p",null,"A Tezos box is available here:\n","[https://www.trufflesuite.com/boxes/tezos-example]"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tezos-example")," box is useful for the deployment of a decentralized application (dapp)."),(0,o.kt)("p",null,"You can download this box with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir tezos-example\n$ cd tezos-example\n$ truffle unbox tezos-example\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"Truffle")," unbox command will not create a new tezos-example folder, but will unpack all the content in the current folder."),(0,o.kt)("h1",{id:"using-truffle"},"Using ",(0,o.kt)("em",{parentName:"h1"},"Truffle")),(0,o.kt)("p",null,"Using ",(0,o.kt)("em",{parentName:"p"},"Truffle")," can be divided into two steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Configuration: modifying scripts to define the way smart contracts are deployed."),(0,o.kt)("li",{parentName:"ol"},"Compilation and deployment, with the ",(0,o.kt)("em",{parentName:"li"},"Truffle Cli"))),(0,o.kt)("h2",{id:"project-structure-overview"},"Project Structure overview"),(0,o.kt)("p",null,"A ",(0,o.kt)("em",{parentName:"p"},"Truffle")," follows this structure:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"build")," (not present at the unpacking of the box): the folder containing the Michelson code, compiled by ",(0,o.kt)("em",{parentName:"li"},"Truffle"),"\nand used for the contract deployments"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"contract"),": the folder containing all the Ligo smart contracts that ",(0,o.kt)("em",{parentName:"li"},"Truffle")," has to compile."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"migrations"),": the folder containing the ",(0,o.kt)("em",{parentName:"li"},"Truffle")," migration scripts for the deployment of the contracts"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"node_modules"),": the node modules used by the ",(0,o.kt)("em",{parentName:"li"},"Truffle")," project"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"package.json"),": contains a script command, which launches a sandbox with ganache"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"scripts"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"sandbox: contains two accounts to use on a sandbox environment."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"test"),": the folder containing Javascript tests"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"truffle-config.js"),": configuration file which defines networks and accounts used for the deployment")),(0,o.kt)("p",null,"The build folder will be created or compiled after any compilation command."),(0,o.kt)("h2",{id:"main-truffle-commands"},"Main ",(0,o.kt)("em",{parentName:"h2"},"Truffle")," commands"),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"Truffle")," Cli provides various commands, that can be displayed with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ truffle --help\n")),(0,o.kt)("p",null,"The main commands are:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"compile   Compile contract source files\ninit      Initialize new and empty project\nmigrate   Run migrations to deploy contracts\nnetworks  Show addresses for deployed contracts on each network\ntest      Run JavaScript and Solidity tests\n")),(0,o.kt)("h2",{id:"compiling-smart-contracts-with-truffle"},"Compiling smart contracts with ",(0,o.kt)("em",{parentName:"h2"},"Truffle")),(0,o.kt)("p",null,"In this part, the ",(0,o.kt)("inlineCode",{parentName:"p"},"tezos-example")," box is used as an example."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Truffle")," is mainly used for smart contract compilation and deployment. It can also launch tests, but other tools such as ",(0,o.kt)("em",{parentName:"p"},"pytezos")," can be used for that."),(0,o.kt)("p",null,"Compiling smart contracts can be done with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ truffle compile\n")),(0,o.kt)("p",null,"Input: valid smart contracts (i.e compiling smart contracts), located in ",(0,o.kt)("inlineCode",{parentName:"p"},"contract")," directory "),(0,o.kt)("p",null,"Output: ",(0,o.kt)("em",{parentName:"p"},"Truffle")," artifacts, stored into the build/contracts directory."),(0,o.kt)("h3",{id:"about-ligo-smart-contracts"},"About ligo smart contracts"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Truffle")," can compile LIGO smart contracts (PascaLigo, Cameligo, ReasonLigo). But they MUST be stored in the ",(0,o.kt)("em",{parentName:"p"},"contract")," folder.\n",(0,o.kt)("em",{parentName:"p"},"Truffle")," considers each ligo file as an independent smart contract. Thus, if a smart contract is split into several ligo files, ",(0,o.kt)("em",{parentName:"p"},"Truffle")," will try to compile each file as a separate smart contract, resulting in a failed compilation. But there is a workaround for this behaviour:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a new folder in the project root directory, called ",(0,o.kt)("inlineCode",{parentName:"li"},"src")," for instance."),(0,o.kt)("li",{parentName:"ol"},"Move all your smart contracts files into ",(0,o.kt)("inlineCode",{parentName:"li"},"src/")),(0,o.kt)("li",{parentName:"ol"},"Create a ligo file, importing the main file from ",(0,o.kt)("inlineCode",{parentName:"li"},"src/"))),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Truffle")," will successfully compile your smart contract."),(0,o.kt)("h3",{id:"truffle-artifacts"},(0,o.kt)("em",{parentName:"h3"},"Truffle")," artifacts"),(0,o.kt)("p",null,"For each ligo file found in the contract, ",(0,o.kt)("em",{parentName:"p"},"Truffle")," will yield an artifact in build/contracts."),(0,o.kt)("p",null,"An artifact is a json file, containing the compiled smart contract, the ligo source code, the deployment information...\nThis example is the artifact yielded for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Counter.ligo")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json5"},'{\n  "contractName": "Counter",\n  "abi": [],\n  "michelson": "<Michelson code as json>",\n  "source": "<Content of the ligo file from contract>",\n  "sourcePath": "path/to/truffle-example/contracts/Counter.ligo",\n  "compiler": {\n    "name": "ligo",\n    "version": "next"\n  },\n  "networks": {},\n  "schemaVersion": "3.2.0-tezos.1",\n  "updatedAt": "2021-03-19T14:27:16.197Z"\n}\n')),(0,o.kt)("p",null,"These artifacts are then used in the deployment scripts."),(0,o.kt)("h3",{id:"hand-ons"},"Hand-ons:"),(0,o.kt)("p",null,"Let's create a truffle project for the Raffle Smart contract, and compile the ligo code into a Michelson code, with ",(0,o.kt)("em",{parentName:"p"},"Truffle"),".\nFirst, we will download the ",(0,o.kt)("inlineCode",{parentName:"p"},"tezos-example")," box and then remove the example contracts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir truffle-raffle\n$ cd truffle-raffle\n$ truffle unbox tezos-example\n$ rm -rf contracts/* migrations/*\n")),(0,o.kt)("p",null,"Let's put the ",(0,o.kt)("a",{parentName:"p",href:"/ligo/write-contracts-ligo#refactoring-the-closeraffle-entrypoint"},"Raffle smart contract")," into our Truffle project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ touch contracts/Raffle.ligo\n")),(0,o.kt)("p",null,"Let's copy and paste the ligo code into this file."),(0,o.kt)("p",null,"Everything is ready for the compilation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ truffle compile\n")),(0,o.kt)("p",null,"A new json file has been created in the ",(0,o.kt)("inlineCode",{parentName:"p"},"build/contracts/")," directory."),(0,o.kt)("h2",{id:"deploying-smart-contracts-with-truffle"},"Deploying smart contracts with ",(0,o.kt)("em",{parentName:"h2"},"Truffle")),(0,o.kt)("p",null,"At this point, the smart contract is compiled and ready to be deployed. However, ",(0,o.kt)("em",{parentName:"p"},"Truffle")," needs to be configured: deployment on a given network,\nwith a given account, a given initial storage ect..."),(0,o.kt)("h3",{id:"using-an-account-for-the-deployment"},"Using an account for the deployment"),(0,o.kt)("p",null,"Originating a contract costs some tz. Thus, an account holding funds is necessary. Accounts with funds on testnets (\ndelphinet, edonet...) can freely be retrieved as a json file here:\n","[https://faucet.tzalpha.net/]"),(0,o.kt)("h3",{id:"adding-a-network"},"Adding a network"),(0,o.kt)("h4",{id:"defining-accounts"},"Defining accounts"),(0,o.kt)("p",null,"The network configuration is handled in the ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle-config.js")," file. It can execute any javascript code needed for the configuration. Some networks are already defined (mainnet, localhost). However, as the tezos protocol is likely to evolve, new networks will probably have to be added. Each network is associated with an account."),(0,o.kt)("p",null,"There are two ways of importing an account:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Importing an account into the ",(0,o.kt)("inlineCode",{parentName:"li"},"truffle-config.js")," file:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const {mnemonic, secret, password, email} = require("/path/to/faucet.json");\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Truffle")," will activate this account before the contract origination."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Setting ",(0,o.kt)("strong",{parentName:"li"},"already activated")," accounts in the scripts folder:\nAccounts can be defined according to the network. By default, a ",(0,o.kt)("em",{parentName:"li"},"sandbox")," folder is present, with two defined acocunts (\nthese two accounts are found in any sandbox). New accounts can be defined by creating a new folder, named after the\nnetwork name (convention), with an ",(0,o.kt)("inlineCode",{parentName:"li"},"accounts.js")," file:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n    account_name: {\n        pkh: "<pkh>",\n        sk: "<sk>",\n        pk: "<pk>"\n    },\n<...>\n};\n')),(0,o.kt)("p",null,"Of course, the faucet can be imported into the ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts.js")," file."),(0,o.kt)("h4",{id:"defining-networks"},"Defining networks"),(0,o.kt)("p",null,"The networks are defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle-config.js")," file. It exports an object that defines networks.\nEach key in ",(0,o.kt)("em",{parentName:"p"},"networks")," sets a network, which requires:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a host: An RPC node (","[https://tezostaquito.io/docs/rpc_nodes/]",") or a local node (as shown in the development network)"),(0,o.kt)("li",{parentName:"ul"},"a port: running node port"),(0,o.kt)("li",{parentName:"ul"},"network_id: ",(0,o.kt)("inlineCode",{parentName:"li"},"*")," by default to match any network"),(0,o.kt)("li",{parentName:"ul"},"type: network type"),(0,o.kt)("li",{parentName:"ul"},"A way to create transaction:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"secretKey"),(0,o.kt)("li",{parentName:"ul"},"secret, mnemonic, password, email")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n  // see <http://truffleframework.com/docs/advanced/configuration>\n  // for more details on how to specify configuration options!\n  networks: {\n      development: {\n          host: "http://localhost",\n          port: 8732,\n          network_id: "*",\n          secretKey: alice.sk,\n          type: "tezos"\n      }\n  }\n')),(0,o.kt)("h4",{id:"hand-ons-1"},"Hand-ons"),(0,o.kt)("p",null,"We will deploy our raffle smart contract onto edonet. We'll need to add this network into the ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle-config.js")," file.\nFirst, we need a faucet account.\nLet's download a faucet from ",(0,o.kt)("a",{parentName:"p",href:"https://faucet.tzalpha.net/"},"https://faucet.tzalpha.net/")," into our root project folder."),(0,o.kt)("p",null,'Let\'s define an "edonet" network, that will use  this faucet:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const {alice} = require(\'./scripts/sandbox/accounts\');\nconst {mnemonic, secret, password, email} = require("./faucet.json");\n\nmodule.exports = {\n    networks: {\n        development: {\n            host: "http://localhost",\n            port: 8732,\n            network_id: "*",\n            secretKey: alice.sk,\n            type: "tezos"\n        },\n        edonet: {\n            host: "https://edonet-tezos.giganode.io",\n            port: 443,\n            network_id: "*",\n            secret,\n            mnemonic,\n            password,\n            email,\n            type: "tezos"\n        },\n        [...]\n}\n}\n;\n\n')),(0,o.kt)("h3",{id:"writing-the-migration-scripts"},"Writing the migration scripts"),(0,o.kt)("p",null,"The smart contracts are ready, the network where it has to be deployed too, the next step is to write the deployment script (also called a migration). These scripts are located in the ",(0,o.kt)("em",{parentName:"p"},"migrations")," directory. "),(0,o.kt)("p",null,"Each migration is a javascript file, defining the deployment tasks. It can execute any javascript code. Each migration starts with a number, followed by a title: ",(0,o.kt)("em",{parentName:"p"},"Truffle")," will run the migrations in an ascending order.\nFor instance, the ",(0,o.kt)("inlineCode",{parentName:"p"},"tezos-example")," box comes with tree migrations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"1_initial_migration.js\n2_deploy_simple_storage.js\n3_deploy_counter.js\n")),(0,o.kt)("p",null,"A migration defines:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the initial storage"),(0,o.kt)("li",{parentName:"ul"},"the contract deployment steps: order, networks, accounts")),(0,o.kt)("h4",{id:"importing-the-smart-contract-to-deploy"},"Importing the smart contract to deploy"),(0,o.kt)("p",null,"The first step is to specify which smart contract is to be deployed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var myContract = artifacts.require("MyContract");\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Truffle")," will look for a ",(0,o.kt)("em",{parentName:"p"},"MyContract.ligo")," file in the ",(0,o.kt)("em",{parentName:"p"},"contract")," directory. Thus, to import a contract, the filename of the contract (without the extension) is used (",(0,o.kt)("inlineCode",{parentName:"p"},"artifacts")," is a ",(0,o.kt)("em",{parentName:"p"},"Truffle")," keyword). It is here possible to import several smart contracts:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var firstContract = artifacts.require("FirstContract");\nvar secondContract = artifacts.require("SecondContract");\n')),(0,o.kt)("h4",{id:"defining-the-initial-storage"},"Defining the initial storage"),(0,o.kt)("p",null,"A smart contract defines a storage. When originated, the initial storage must be set and the storage must\nbe compliant with the structure defined in the smart contract to be deployed: the names and types must be respected. The\ninitial storage is declared with a Javascript syntax. Two modules can come in handy:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const {MichelsonMap} = require("@taquito/taquito"); // for Michelson maps\nconst web3 = require("web3"); // for bytes\n')),(0,o.kt)("p",null,"Below is the matching table between Javascript and Ligo."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Ligo"),(0,o.kt)("th",{parentName:"tr",align:null},"Javascript"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"List, Tuple"),(0,o.kt)("td",{parentName:"tr",align:null},"[ ]")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Big_map, Map"),(0,o.kt)("td",{parentName:"tr",align:null},"const bigMap = new MichelsonMap() ",(0,o.kt)("br",null)," bigMap.set(key, values) ",(0,o.kt)("br",null)," ",(0,o.kt)("em",{parentName:"td"},"(from taquito module)"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"string, address"),(0,o.kt)("td",{parentName:"tr",align:null},"string")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"bytes"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"web3.utils.asciiToHex(string_to_convert).slice(2)"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"int, nat, mutez"),(0,o.kt)("td",{parentName:"tr",align:null},"number")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"record"),(0,o.kt)("td",{parentName:"tr",align:null},"Object { }")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,o.kt)("td",{parentName:"tr",align:null},"Date.now()")))),(0,o.kt)("p",null,"Here is a migration example, defining a storage with essential types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// modules import\nconst {MichelsonMap} = require("@taquito/taquito"); // used for big maps\nconst web3 = require("web3"); // used for bytes\n\n// contract to deploy\nvar MyContract = artifacts.require("MyContract");\n\n// initial storage definition\nconst admin = "tz1ibMpWS6n6MJn73nQHtK5f4ogyYC1z9T9z"; //address\nconst emptyBigMap = new MichelsonMap(); // empty big map\nconst bigMapWithAnElement = new MichelsonMap(); // empty big map\nbigMapWithAnElement.set(\n    1, {\n        param1: 5,\n        param2: "second param"\n    }\n); // previous big map with a object (record in ligo) as value, and an int as key\nconst emptySet = []; // empty set\nconst myBytes = web3.utils.asciiToHex("string to convert into bytes").slice(2); // bytes\nconst counter = 10; // int\n\nconst initialStorage = {\n    "contractAdmin": admin,\n    "contractFirstBigMap": emptyBigMap,\n    "contractSecondBigMap": bigMapWithAnElement,\n    "contractSet": emptySet,\n    "contractCounter": metadata,\n};\n')),(0,o.kt)("p",null,"Any type and structure change in the Ligo smart contract storage must be mirrored here, in the ",(0,o.kt)("inlineCode",{parentName:"p"},"initialStorage")," variable.\nThis way, the evolution of the storage used can be versioned."),(0,o.kt)("h4",{id:"deployment"},"Deployment"),(0,o.kt)("p",null,"The last step of the migration is the deployment definition. It's a function export, which defines how the contract(s)\nshould be deployed. This function takes three arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"deployer"),": truffle object which deploys a contract"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"network"),": the network used"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"account"),": the account used")),(0,o.kt)("h5",{id:"deployer"},"Deployer"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"deployer")," object deploys the code on the specified ",(0,o.kt)("em",{parentName:"p"},"network"),". The deployer takes the ",(0,o.kt)("inlineCode",{parentName:"p"},"initialStorage")," object (\nand a few options) as input."),(0,o.kt)("p",null,"A minimal viable migration could be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var MyContract = artifacts.require("MyContract");\nconst initialStorage = {}\nmodule.exports = (deployer, network, account) => {\n    // deployment steps\n    deployer.deploy(MyContract, initialStorage);\n};\n')),(0,o.kt)("p",null,"The execution returns some pieces of information (such as the contract address, the cost ...)"),(0,o.kt)("h5",{id:"network"},"Network"),(0,o.kt)("p",null,"It can be useful to deploy a smart contract differently according to the network.\nFor instance, if the storage holds an administator address, it's likely to be different on the mainnet and on testnet\nThe migration can be branched according to the network, like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var MyContract = artifacts.require("MyContract");\nconst edonetInitialStorage = {}\nconst mainnetInitialStorage = {}\nmodule.exports = (deployer, network, account) => {\n    if (network === "edonet") {\n        deployer.deploy(MyContract, edonetInitialStorage);\n    } else {\n        deployer.deploy(MyContract, mainnetInitialStorage);\n    }\n\n};\n')),(0,o.kt)("p",null,"The deployment changes according to the network used. Here, the storage is not the same."),(0,o.kt)("h5",{id:"account"},"Account"),(0,o.kt)("p",null,"The account used for the migration can be handled during the migration."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var MyContract = artifacts.require("MyContract");\nconst initialStorage = {admin: "tz1ibMpWS6n6MJn73nQHtK5f4ogyYC1z9T9z"}\nmodule.exports = (deployer, network, account) => {\n    deployer.deploy(MyContract, {...initialStorage, admin: account[0]});\n\n};\n')),(0,o.kt)("p",null,"This example sets the migration account as the contract administrator."),(0,o.kt)("h5",{id:"migrating-several-contracts"},"Migrating several contracts"),(0,o.kt)("p",null,"A migration can deploy several contracts at the same time. This is useful when the migration data have to be used for the deployment of another contract.\nBelow, is an example with two contracts. The second contract needs to call on the first and with its address."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var firstContract = artifacts.require("firstContract");\nvar secondContract = artifacts.require("secondContract");\nconst initialStorage = {admin: "tz1ibMpWS6n6MJn73nQHtK5f4ogyYC1z9T9z", contractToCall: ""}\nmodule.exports = (deployer, network, account) => {\n    deployer.deploy(firstContract).then(function () {\n        return deployer.deploy(secondContract,\n            {\n                ...initialStorage,\n                contractToCall: firstContract.address\n            });\n    });\n\n};\n')),(0,o.kt)("h3",{id:"hand-ons-2"},"Hand-ons"),(0,o.kt)("p",null,"Let's create the migration file for our raffle contract: ",(0,o.kt)("inlineCode",{parentName:"p"},"1_deploy_raffle.js")),(0,o.kt)("p",null,"First, we need to import the contract (Step 1)"),(0,o.kt)("p",null,"Second, we need to define the initial storage, which should have the following fields:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"admin: ",(0,o.kt)("inlineCode",{parentName:"li"},"address")),(0,o.kt)("li",{parentName:"ul"},"close_date: ",(0,o.kt)("inlineCode",{parentName:"li"},"timestamp")),(0,o.kt)("li",{parentName:"ul"},"jackpot: ",(0,o.kt)("inlineCode",{parentName:"li"},"mutez")),(0,o.kt)("li",{parentName:"ul"},"description: ",(0,o.kt)("inlineCode",{parentName:"li"},"string")),(0,o.kt)("li",{parentName:"ul"},"players: ",(0,o.kt)("inlineCode",{parentName:"li"},"address list")),(0,o.kt)("li",{parentName:"ul"},"sold_tickets: ",(0,o.kt)("inlineCode",{parentName:"li"},"nat address big_map")),(0,o.kt)("li",{parentName:"ul"},"raffle_is_open: ",(0,o.kt)("inlineCode",{parentName:"li"},"boolean")),(0,o.kt)("li",{parentName:"ul"},"winning_ticket_number_hash: ",(0,o.kt)("inlineCode",{parentName:"li"},"bytes"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"taquito")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"web3")," will be used for the ",(0,o.kt)("inlineCode",{parentName:"p"},"bytes")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"big_map")," types.\nThe initial storage that is defined contains an open raffle. (Step 2)"),(0,o.kt)("p",null,"Finally, the deployment must be defined: the admin of the contract is the address used for the deployment (step 3)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const Raffle = artifacts.require("Raffle"); // step 1\n// step 2\nconst {MichelsonMap} = require("@taquito/taquito");\nconst web3 = require("web3");\n\nconst admin = ""\nconst closeDate = Date.now() + 10;\nconst jackpot = 100\nconst description = ""\nconst players = []\nconst soldTickets = new MichelsonMap()\nconst raffleIsOpen = true\nconst winningTicketHash = web3.utils.asciiToHex("ec85151eb06e201cebfbb06d43daa1093cb4731285466eeb8ba1e79e7ee3fae3").slice(2)\n\nconst initialStorage = {\n    "admin": admin,\n    "close_date": closeDate.toString(),\n    "jackpot": jackpot,\n    "description": description,\n    "players": players,\n    "sold_tickets": soldTickets,\n    "raffle_is_open": raffleIsOpen,\n    "winning_ticket_number_hash": winningTicketHash\n}\n\n\n// step 3\nmodule.exports = (deployer, network, account) => {\n    deployer.deploy(Raffle, {...initialStorage, admin: account[0]})\n};\n')),(0,o.kt)("h3",{id:"running-a-migration"},"Running a migration"),(0,o.kt)("p",null,"Everything is now ready for deployment: the network and the migration account are set, the initial storage and the deployment step are defined.\nFrom the project directory, you can run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ truffle migrate --network <network_name>\n")),(0,o.kt)("p",null,"This command is broken down into two steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Verifying that the smart contracts are compiled. If they are not, it will launch a compilation"),(0,o.kt)("li",{parentName:"ol"},"Deploying the smart contracts, following the migration scripts under the ",(0,o.kt)("em",{parentName:"li"},"migration")," folder. Before the deployment, ",(0,o.kt)("em",{parentName:"li"},"Truffle")," checks if the initial storage is compliant with its Michelson definition. If not, it will raise an exception.")),(0,o.kt)("p",null,"Each migration generally takes up to 30 seconds. In the end, several pieces of information are displayed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"1_deploy_raffle.js\n==================\n\n   Replacing 'Raffle'\n   ------------------\n   > operation hash:      onoMN7C2YNwJPeXtkXFwTrcitD9udgEQNdBGTaZD2CHVjpNsTBQ\n   > Blocks: 0            Seconds: 4\n   > contract address:    KT1N3WFAwMUvqnKMJkNrLCnWBRkLTFvRw7Vk\n   > block number:        206080\n   > block timestamp:     2021-04-26T14:38:53Z\n   > account:             tz1cGftgD3FuBmBhcwY24RaMm5D2UXLr5LHW\n   > balance:             28390.642777\n   > gas used:            11056\n   > storage used:        2101 bytes\n   > fee spent:           3.477 mtz\n   > burn cost:           0.5895 tez\n   > value sent:          0 XTZ\n   > total cost:          0.592977 XTZ\n\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:            0.592977 XTZ\n\n\nSummary\n=======\n> Total deployments:   1\n> Final cost:          0.592977 XTZ\n\n")),(0,o.kt)("p",null,"The most useful piece of information are the contract address (to interact with it) and the transaction hash (which refers to the origination on the blockchain). "),(0,o.kt)("p",null,"Some of these pieces of information can be found in the json file under the ",(0,o.kt)("inlineCode",{parentName:"p"},"build/contracts")," folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n"contractName": "Raffle",\n"abi": [],\n"michelson": "<michelson_code>",\n"source": "<ligo_code>",\n"sourcePath": "/path/to/contracts/Raffle.ligo",\n"compiler": {\n"name": "ligo",\n"version": "next"\n},\n"networks": {\n"NetXSgo1ZT2DRUG": {\n"events": {},\n"links": {},\n"address": "KT18uWmKP5gTVh7FKHwRRwjE6XVAsm7WLHSF",\n"transactionHash": "ooWVHFdjJbvGYDp9CUhUzonRfobvnHExzqsZBQmbEHpmcuveh6Q"\n}\n},\n"schemaVersion": "3.2.0-tezos.1",\n"updatedAt": "2021-04-02T08:29:37.743Z",\n"networkType": "tezos"\n}\n')),(0,o.kt)("h2",{id:"interacting-with-a-deployed-contract"},"Interacting with a deployed contract"),(0,o.kt)("p",null,"Once the migration is done, it can be convenient to quickly verify that the contract is deployed.\nThere are many tools for this: cli, libraries, GUI... In this section, we'll keep it simple with a GUI. "),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://tzstats.com/"},"tzstats.com")," provides information about any public Tezos network: transactions, accounts, contracts (origination, storage, entrypoints)..."),(0,o.kt)("p",null,"Once a contract is deployed, it can be checked here (on edonet): ",(0,o.kt)("a",{parentName:"p",href:"https://edo.tzstats.com/"},"https://edo.tzstats.com/"),'<contract_address>.\nYou should see a "New Smart contract created by ..." line in the ',(0,o.kt)("em",{parentName:"p"},"Calls")," section. The contract storage can also be inspected."),(0,o.kt)("h1",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"The first step in developing a Dapp is to deploy the smart contracts. ",(0,o.kt)("em",{parentName:"p"},"Truffle")," takes ligo code, compiles it into Michelson code and deploys it onto any public or private network. "),(0,o.kt)("p",null,"Each migration needs an initial storage, that should be compliant with the storage section of the Michelson code. "),(0,o.kt)("p",null,"Thanks to its configuration and easily readable and versioned migration files, ",(0,o.kt)("em",{parentName:"p"},"Truflle")," is an essential tool throughout the development and deployment of a dapp."))}p.isMDXComponent=!0}}]);