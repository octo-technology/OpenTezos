(self.webpackChunkopentezos=self.webpackChunkopentezos||[]).push([[7035],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return l},kt:function(){return d}});var a=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=a.createContext({}),p=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=p(t.components);return a.createElement(c.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),u=p(n),d=o,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(h,i(i({ref:e},l),{},{components:n})):a.createElement(h,i({ref:e},l))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7762:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return l}});var a=n(2122),o=n(9756),r=(n(7294),n(3905)),i={id:"taquito",disable_pagination:!0,title:"Taquito"},s={unversionedId:"dapp/taquito",id:"dapp/taquito",isDocsHomePage:!1,title:"Taquito",description:"Interactions with a Tezos blockchain can be done thanks to the Tezos cli.",source:"@site/docs/dapp/taquito.md",sourceDirName:"dapp",slug:"/dapp/taquito",permalink:"/dapp/taquito",editUrl:"https://github.com/octo-technology/OpenTezos/tree/main/docs/dapp/taquito.md",version:"current",lastUpdatedBy:"Theotime-Akeare",lastUpdatedAt:1623417748,formattedLastUpdatedAt:"6/11/2021",frontMatter:{id:"taquito",disable_pagination:!0,title:"Taquito"},sidebar:"docs",previous:{title:"Smart contract deployment with Truffle",permalink:"/dapp/truffle_compilation_migration"},next:{title:"Temple Wallet",permalink:"/dapp/temple"}},c=[{value:"Contract data",id:"contract-data",children:[]},{value:"Activating the account from <em>Taquito</em>",id:"activating-the-account-from-taquito",children:[]},{value:"Sending a transaction",id:"sending-a-transaction",children:[]},{value:"Making a contract call",id:"making-a-contract-call",children:[]},{value:"Sending several transactions",id:"sending-several-transactions",children:[]}],p={toc:c};function l(t){var e=t.components,n=(0,o.Z)(t,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Interactions with a Tezos blockchain can be done thanks to the Tezos cli.\nHowever, it is not suitable to build Dapps, since it needs to be integrated into applications, mostly web interfaces."),(0,r.kt)("p",null,"Fortunately, the Tezos ecosystem offers libraries in several languages, that enable developers to build efficient dapps.\n",(0,r.kt)("em",{parentName:"p"},"Taquito")," is one of these libraries: it is a Typescript library developed and maintained by ",(0,r.kt)("em",{parentName:"p"},"ECAD Labs"),".\nThis library offers developers all the expected interactions with the blockchain: retrieving information about a Tezos network, sending a transaction, contract origination and interactions (calling an entrypoint, fetching the storage...), delegation, metadata..."),(0,r.kt)("p",null,"All these wallets (",(0,r.kt)("a",{parentName:"p",href:"https://airgap.it/"},"AirGap"),", ",(0,r.kt)("a",{parentName:"p",href:"https://cryptonomic.tech/galleon.html"},"Galleon"),", ",(0,r.kt)("a",{parentName:"p",href:"https://wallet.kukai.app/"},"Kukai"),", ",(0,r.kt)("a",{parentName:"p",href:"https://spirewallet.com/"},"Spire"),", ",(0,r.kt)("a",{parentName:"p",href:"https://templewallet.com/download/"},"Temple")," ) use this library to fonction."),(0,r.kt)("p",null,"A full reference is available ",(0,r.kt)("a",{parentName:"p",href:"https://tezostaquito.io/docs/quick_start"},"here"),"."),(0,r.kt)("p",null,"This chapter is an introduction to ",(0,r.kt)("em",{parentName:"p"},"Taquito"),": using interactions with a deployed Raffle smart contract, the basic instructions of Taquito will be explained."),(0,r.kt)("h1",{id:"installation"},"Installation"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"Taquito")," library is broken down into several modules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/taquito"},"@taquito/taquito"),": High-level functionalities that build upon the other packages in the Tezos Typescript Library Suite."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/ledger-signer"},"@taquito/ledger-signer"),": Ledger signer provider."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/rpc"},"@taquito/rpc"),": Provides low-level methods, and types to invoke RPC calls from a Nomadic Tezos RPC node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/utils"},"@taquito/utils"),": Converts michelson data and types into convenient JS/TS objects."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/michelson-encoder"},"@taquito/michelson-encoder"),": Converts michelson data and types into convenient JS/TS objects."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/michel-codec"},"@taquito/michel-codec"),": Michelson parser/validator/formatter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/local-forging"},"@taquito/local-forging"),": Provide local forging functionality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/signer"},"@taquito/signer"),": Provide signing functionality.")),(0,r.kt)("p",null,"The main module is ",(0,r.kt)("inlineCode",{parentName:"p"},"@taquito/taquito"),": it will be used for most actions. The other modules are used by the ",(0,r.kt)("inlineCode",{parentName:"p"},"@taquito/taquito")," methods, as complementary features."),(0,r.kt)("p",null,"Let's initialize a Typescript project and install taquito:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir taquito-poc\n$ mkdir taquito-poc/src\n$ touch taquito-poc/src/app.ts taquito-poc/main.ts\n$ cd taquito-poc\n$ yarn add @taquito/taquito\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"maint.ts")," file will import an ",(0,r.kt)("inlineCode",{parentName:"p"},"App")," class from ",(0,r.kt)("inlineCode",{parentName:"p"},"src/app.ts")," and run it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { App } from './src/app';\n\nnew App().main();\n\n")),(0,r.kt)("p",null,"Let's create the ",(0,r.kt)("inlineCode",{parentName:"p"},"App")," class with a ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," method. We will import the ",(0,r.kt)("inlineCode",{parentName:"p"},"TezosToolkit")," class to check if ",(0,r.kt)("inlineCode",{parentName:"p"},"@taquito/taquito")," is indeed installed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { TezosToolkit } from '@taquito/taquito';\nexport class App {\n\n    public async main() { }\n\n}\n")),(0,r.kt)("p",null,"Let's run it with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npx ts-node main.ts\n")),(0,r.kt)("p",null,"It should not raise any exception. Let's start ",(0,r.kt)("em",{parentName:"p"},"Taquito"),"!"),(0,r.kt)("h1",{id:"taquito-configuration"},"Taquito configuration"),(0,r.kt)("p",null,"First, we need to configure ",(0,r.kt)("em",{parentName:"p"},"Taquito")," with an RPC URL. To do that we will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"TezosToolkit"),': it is the "facade class that surfaces all of the libraries capability and allow its configuration". When created, it accepts an RPC url. Here, we will use the ',(0,r.kt)("em",{parentName:"p"},"SmartPy")," RPC url: ",(0,r.kt)("a",{parentName:"p",href:"https://florencenet.smartpy.io/"},"https://florencenet.smartpy.io/")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.tezos = new TezosToolkit(rpcUrl);\n    }\n\n    public async main() { }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// main.ts\nimport { App } from './src/app';\n\nconst RPC_URL = \"https://florencenet.smartpy.io/\"\n\nnew App(RPC_URL).main();\n")),(0,r.kt)("h1",{id:"interactions-without-an-account"},"Interactions without an account"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Taquito")," is already ready for some actions: it can retrieve all the information about the Tezos network, the accounts, the smart contracts..."),(0,r.kt)("p",null,"For instance, let's retrieve the balance of an account, with the ",(0,r.kt)("inlineCode",{parentName:"p"},"getBalance")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.tezos = new TezosToolkit(rpcUrl);\n    }\n\n    public getBalance(address: string) : void {\n    this.tezos.rpc\n        .getBalance(address)\n        .then(balance => console.log(balance))\n        .catch(e => console.log('Address not found'));\n    }\n\n    public async main() { }\n")),(0,r.kt)("p",null,"Every interaction with the Tezos network through ",(0,r.kt)("em",{parentName:"p"},"Taquito"),"  will be handled using a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"."),(0,r.kt)("p",null,"Let's call this method for the address: ",(0,r.kt)("inlineCode",{parentName:"p"},"tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// main.ts\nimport { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\n\nnew App(RPC_URL).getBalance(ACCOUNT_TO_CHECK);\n\n')),(0,r.kt)("p",null,"Let's run it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npx ts-node main.ts \nBigNumber { s: 1, e: 10, c: [ 53152138122 ] }\n")),(0,r.kt)("h2",{id:"contract-data"},"Contract data"),(0,r.kt)("p",null,"We can also retrieve the metadata and storage of a contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.tezos = new TezosToolkit(rpcUrl);\n    }\n\n    public getBalance(address: string) : void {\n    this.tezos.rpc\n        .getBalance(address)\n        .then(balance => console.log(balance))\n        .catch(e => console.log('Address not found'));\n    }\n\n\n    public getContractEntrypoints(address: string) {\n        this.tezos.contract\n            .at(address)\n            .then((c) => {\n                let methods = c.parameterSchema.ExtractSignatures();\n                console.log(JSON.stringify(methods, null, 2));\n            })\n            .catch((error) => console.log(`Error: ${error}`));\n    }\n\n    public async main() { }\n")),(0,r.kt)("p",null,"We will use a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," contract on Florencenet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\nconst COUNTER_CONTRACT = "KT1BEMULAGQ58C5NNdWQM3WYLjUtwgJ8X8aN"\n\nnew App(RPC_URL).getContractEntrypoints(COUNTER_CONTRACT);\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'$ npx ts-node main.ts \n[\n  [\n    "decrement",\n    "int"\n  ],\n  [\n    "increment",\n    "int"\n  ]\n]\n')),(0,r.kt)("h1",{id:"interactions-with-an-account"},"Interactions with an account"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Taquito")," can of course sign and send transactions, but it needs a private key to do that. Let's retrieve a faucet from ",(0,r.kt)("a",{parentName:"p",href:"https://faucet.tzalpha.net/"},"https://faucet.tzalpha.net/")," and put it in the project directory."),(0,r.kt)("h2",{id:"activating-the-account-from-taquito"},"Activating the account from ",(0,r.kt)("em",{parentName:"h2"},"Taquito")),(0,r.kt)("p",null,"Every implicit address must be activated on a public network. Let's activate ours on Florencenet."),(0,r.kt)("p",null,"First, we need to install the ",(0,r.kt)("inlineCode",{parentName:"p"},"@taquito/signer")," module, used to sign the transactions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn add @taquito/signer\n")),(0,r.kt)("p",null,"We will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"InMemorySigner"),": it loads a private key in memory and uses it to sign transactions."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Storing private keys in memory is suitable for development workflows but risky for production use-cases! Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"InMemorySigner")," appropriately given your risk profile")),(0,r.kt)("p",null,"You can find a complete reference ",(0,r.kt)("a",{parentName:"p",href:"https://tezostaquito.io/docs/inmemory_signer"},"here"),", and find more ",(0,r.kt)("em",{parentName:"p"},"signers")," ",(0,r.kt)("a",{parentName:"p",href:"https://tezostaquito.io/docs/tezbridge_signer"},"here")," and ",(0,r.kt)("a",{parentName:"p",href:"https://tezostaquito.io/docs/ledger_signer"},"here"),"."),(0,r.kt)("p",null,"First, we need to set the signer of our TezosToolkit using ",(0,r.kt)("inlineCode",{parentName:"p"},"setSignerProvider"),". The signer will load a private key from our faucet with the ",(0,r.kt)("inlineCode",{parentName:"p"},"fromFundraiser")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner } from '@taquito/signer';\nconst faucet = require('../faucet.json');\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.rpcUrl = rpcUrl\n        this.tezos = new TezosToolkit(rpcUrl);\n        this.tezos.setSignerProvider(InMemorySigner.fromFundraiser(faucet.email, faucet.password, faucet.mnemonic.join(' ')))\n    }\n\n    public async main() { }\n")),(0,r.kt)("p",null,"We can now add an ",(0,r.kt)("inlineCode",{parentName:"p"},"activateAccount")," method, with an ",(0,r.kt)("inlineCode",{parentName:"p"},"activate")," method taking the address and the secret key as inputs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner } from '@taquito/signer';\nconst faucet = require('../faucet.json');\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.rpcUrl = rpcUrl\n        this.tezos = new TezosToolkit(rpcUrl);\n        this.tezos.setSignerProvider(InMemorySigner.fromFundraiser(faucet.email, faucet.password, faucet.mnemonic.join(' ')))\n    }\n\n    public async activateAccount() {\n        const {pkh, secret} = faucet;\n\n        try {\n            const operation = await this.tezos.tz.activate(pkh, secret);\n            await operation.confirmation();\n        } catch (e) {\n            console.log(e)\n        }\n\n    }\n\n    public async main() { }\n")),(0,r.kt)("p",null,"And call it from our ",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\nconst COUNTER_CONTRACT = "KT1BEMULAGQ58C5NNdWQM3WYLjUtwgJ8X8aN"\n\nnew App(RPC_URL).activateAccount();\n')),(0,r.kt)("p",null,"If you take a look on an explorer (",(0,r.kt)("a",{parentName:"p",href:"https://florence.tzstats.com/"},"https://florence.tzstats.com/")," for instance), you will see your activated account on it."),(0,r.kt)("h2",{id:"sending-a-transaction"},"Sending a transaction"),(0,r.kt)("p",null,"Now that ",(0,r.kt)("em",{parentName:"p"},"Taquito")," is configured with an activated account, we can send transactions. Let's send some to another address."),(0,r.kt)("p",null,"Transactions can be sent with ",(0,r.kt)("inlineCode",{parentName:"p"},"this.tezos.contract.transfer"),". It returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<TransactionOperation>"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"TransactionOperation")," contains the information about this transaction. It also has a ",(0,r.kt)("inlineCode",{parentName:"p"},"confirmation")," method. This method will wait for several of confirmations (that can be passed as input). But, we will be notified when a transaction is confirmed."),(0,r.kt)("p",null,"Let's create a ",(0,r.kt)("inlineCode",{parentName:"p"},"sendTz")," method that will send an ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," of tz to the recipient ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner } from '@taquito/signer';\nconst faucet = require('../faucet.json');\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.rpcUrl = rpcUrl\n        this.tezos = new TezosToolkit(rpcUrl);\n        this.tezos.setSignerProvider(InMemorySigner.fromFundraiser(faucet.email, faucet.password, faucet.mnemonic.join(' ')))\n    }\n\n\n    public sendTz(address: string, amount: number) {\n\n        console.log(`Transfering ${amount} \ua729 to ${address}...`);\n        this.tezos.contract.transfer({ to: address, amount: amount })\n            .then(op => {\n                console.log(`Waiting for ${op.hash} to be confirmed...`);\n                return op.confirmation(1).then(() => op.hash);\n            })\n            .then(hash => console.log(`${hash}`))\n            .catch(error => console.log(`Error: ${error} ${JSON.stringify(error, null, 2)}`));\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\nconst COUNTER_CONTRACT = "KT1BEMULAGQ58C5NNdWQM3WYLjUtwgJ8X8aN"\nconst RECIPIENT = "tz1WD73bxtb3oeBBTU471Yz5gcy9NMzepfMJ"\nconst AMOUNT = 10\nnew App(RPC_URL).sendTz(RECIPIENT,AMOUNT);\n\n')),(0,r.kt)("p",null,"Let's run it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npx ts-node main.ts \nTransfering 10 \ua729 to tz1WD73bxtb3oeBBTU471Yz5gcy9NMzepfMJ...\nWaiting for ooYGXazAECCMTehpfsPWo6JxavJs2a5KYP6a1i6eU5ofATWnHbH to be confirmed...\nooYGXazAECCMTehpfsPWo6JxavJs2a5KYP6a1i6eU5ofATWnHbH\n\n")),(0,r.kt)("p",null,"We can then check the transaction on an explorer: ",(0,r.kt)("a",{parentName:"p",href:"https://florence.tzstats.com/ooYGXazAECCMTehpfsPWo6JxavJs2a5KYP6a1i6eU5ofATWnHbH"},"https://florence.tzstats.com/ooYGXazAECCMTehpfsPWo6JxavJs2a5KYP6a1i6eU5ofATWnHbH")),(0,r.kt)("h2",{id:"making-a-contract-call"},"Making a contract call"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Taquito")," can obviously make a contract call. We will use a simple Counter contract. First, we need to know what are the available entrypoints. We can use here the ",(0,r.kt)("inlineCode",{parentName:"p"},"getContractEntrypoints")," defined in the ",(0,r.kt)("a",{parentName:"p",href:"##contract-data"},"Contract data subsection"),"."),(0,r.kt)("p",null,"Let's call the ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," entrypoint. It takes as an input an int."),(0,r.kt)("p",null,"To do so, we need:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"to get the contract: ",(0,r.kt)("inlineCode",{parentName:"li"},"this.tezos.contract.at(contract)"),". It returns a ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise<ContractAbstraction<ContractProvider>>")),(0,r.kt)("li",{parentName:"ol"},"get the entrypoints: The ",(0,r.kt)("inlineCode",{parentName:"li"},"ContractAbstraction<ContractProvider>")," has a ",(0,r.kt)("inlineCode",{parentName:"li"},"methods"),": it contrains the entrypoints ",(0,r.kt)("inlineCode",{parentName:"li"},"increment")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"decrement")),(0,r.kt)("li",{parentName:"ol"},"get the increment entrypoint: ",(0,r.kt)("inlineCode",{parentName:"li"},"methods.increment(2)"),". It increments the counter by ",(0,r.kt)("inlineCode",{parentName:"li"},"2")),(0,r.kt)("li",{parentName:"ol"},"send the contract call and inspect the transaction: ",(0,r.kt)("inlineCode",{parentName:"li"},"contract.methods.increment(i).send()")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"contract.methods.increment(i).toTransferParams()")),(0,r.kt)("li",{parentName:"ol"},"If the transaction is sent, wait for a number of confirmations (just like in a transfer transaction)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner } from '@taquito/signer';\nconst faucet = require('../faucet.json');\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.rpcUrl = rpcUrl\n        this.tezos = new TezosToolkit(rpcUrl);\n        this.tezos.setSignerProvider(InMemorySigner.fromFundraiser(faucet.email, faucet.password, faucet.mnemonic.join(' ')))\n    }\n\n\n    public increment(increment: number, contract: string) {\n        this.tezos.contract\n            .at(contract) // step 1\n            .then((contract) => {\n                console.log(`Incrementing storage value by ${increment}...`);\n                return contract.methods.increment(increment).send(); // steps 2, 3 and 4\n            })\n            .then((op) => {\n                console.log(`Awaiting for ${op.hash} to be confirmed...`);\n                return op.confirmation(3).then(() => op.hash); // step 5\n            })\n            .then((hash) => console.log(`Operation injected: https://florence.tzstats.com/${hash}`))\n            .catch((error) => console.log(`Error: ${JSON.stringify(error, null, 2)}`));\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\nconst COUNTER_CONTRACT = "KT1BEMULAGQ58C5NNdWQM3WYLjUtwgJ8X8aN"\nconst RECIPIENT = "tz1WD73bxtb3oeBBTU471Yz5gcy9NMzepfMJ"\nconst AMOUNT = 10\nconst INCREMENT = 5\nnew App(RPC_URL).increment(INCREMENT, COUNTER_CONTRACT);\n\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"send()")," can take as an input an object with fields such as ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," (which defines an amount to be sent with the contract call), ",(0,r.kt)("inlineCode",{parentName:"p"},"storageLimit"),"..."),(0,r.kt)("h2",{id:"sending-several-transactions"},"Sending several transactions"),(0,r.kt)("p",null,"Let's consider this app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner } from '@taquito/signer';\nconst faucet = require('../faucet.json');\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.rpcUrl = rpcUrl\n        this.tezos = new TezosToolkit(rpcUrl);\n        this.tezos.setSignerProvider(InMemorySigner.fromFundraiser(faucet.email, faucet.password, faucet.mnemonic.join(' ')))\n    }\n\n\n    public increment(increment: number, contract: string) {\n        this.tezos.contract\n            .at(contract) // step 1\n            .then((contract) => {\n                console.log(`Incrementing storage value by ${increment}...`);\n                return contract.methods.increment(increment).send(); // steps 2, 3 and 4\n            })\n            .then((op) => {\n                console.log(`Awaiting for ${op.hash} to be confirmed...`);\n                return op.confirmation(3).then(() => op.hash); // step 5\n            })\n            .then((hash) => console.log(`Operation injected: https://florence.tzstats.com/${hash}`))\n            .catch((error) => console.log(`Error: ${JSON.stringify(error, null, 2)}`));\n    }\n\n    public sendTz(address: string, amount: number) {\n\n        console.log(`Transfering ${amount} \ua729 to ${address}...`);\n        this.tezos.contract.transfer({ to: address, amount: amount })\n            .then(op => {\n                console.log(`Waiting for ${op.hash} to be confirmed...`);\n                return op.confirmation(1).then(() => op.hash);\n            })\n            .then(hash => console.log(`${hash}`))\n            .catch(error => console.log(`Error: ${error} ${JSON.stringify(error, null, 2)}`));\n    }\n}\n")),(0,r.kt)("p",null,"In a dapp, we might be facing a use-case where we need to send several transactions at the same time (contract calls, originations or transfer transactions). The easiest would be to make those calls one after the other:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\nconst COUNTER_CONTRACT = "KT1BEMULAGQ58C5NNdWQM3WYLjUtwgJ8X8aN"\nconst RECIPIENT = "tz1WD73bxtb3oeBBTU471Yz5gcy9NMzepfMJ"\nconst AMOUNT = 10\nconst INCREMENT = 5\n\nconst app : App = new App(RPC_URL);\napp.increment(INCREMENT, COUNTER_CONTRACT);\napp.sendTz(RECIPIENT, AMOUNT);\n')),(0,r.kt)("p",null,"Here, we make a contract call, then we send some funds to an address. Let's try it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'$ npx ts-node main.ts \nTransfering 10 \ua729 to tz1WD73bxtb3oeBBTU471Yz5gcy9NMzepfMJ...\nIncrementing storage value by 5...\nWaiting for opYNFzprpcnTCS2dWP9STdJJ8HUpcMGeJNcczmKnBK1SNpXQeoC to be confirmed...\nError: {\n  "message": "Http error response: (500) [{\\"kind\\":\\"temporary\\",\\"id\\":\\"failure\\",\\"msg\\":\\"Error while applying operation ongme9f4evozEpAAtP3MUeiU79emuc8KGyoaFGYxvPUUFR3TDUA:\\\\nbranch refused (Error:\\\\n                  Counter 334156 already used for contract tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC (expected 334157)\\\\n)\\"}]\\n",\n  "status": 500,\n  "statusText": "Internal Server Error",\n  "body": "[{\\"kind\\":\\"temporary\\",\\"id\\":\\"failure\\",\\"msg\\":\\"Error while applying operation ongme9f4evozEpAAtP3MUeiU79emuc8KGyoaFGYxvPUUFR3TDUA:\\\\nbranch refused (Error:\\\\n                  Counter 334156 already used for contract tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC (expected 334157)\\\\n)\\"}]\\n",\n  "url": "https://florencenet.smartpy.io/injection/operation",\n  "name": "HttpResponse"\n}\nopYNFzprpcnTCS2dWP9STdJJ8HUpcMGeJNcczmKnBK1SNpXQeoC\n')),(0,r.kt)("p",null,"The meaningful part is ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter 334156 already used for contract tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"),": a transaction (contract call) was already in the mempool when the transfer transaction was sent. Thus, it failed. "),(0,r.kt)("p",null,"However, ",(0,r.kt)("em",{parentName:"p"},"Taquito")," offers a ",(0,r.kt)("inlineCode",{parentName:"p"},"batch")," method, which enables the dapp to send several transactions at the same time."),(0,r.kt)("p",null,"To do so, we will need to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"retrieve the contract that we want to call"),(0,r.kt)("li",{parentName:"ol"},"call the batch method"),(0,r.kt)("li",{parentName:"ol"},"Add the calls with ",(0,r.kt)("inlineCode",{parentName:"li"},"withTransfer")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"withContractCall")),(0,r.kt)("li",{parentName:"ol"},"send the transactions batch"),(0,r.kt)("li",{parentName:"ol"},"wait for their confirmation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"    public async sendInBatch(contractAddress: string, recipientAddress : string) {\n        const contract = await this.tezos.contract.at(contractAddress) //step 1\n\n        const batch = this.tezos.contract.batch() // step 2\n            .withTransfer({ to: recipientAddress, amount: 10 }) // step 3\n            .withTransfer({ to: recipientAddress, amount: 100 }) // step 3\n            .withTransfer({ to: recipientAddress, amount: 1000 }) // step 3\n            .withContractCall(contract.methods.increment(10)) // step 3\n\n        const batchOp = await batch.send(); // step 4\n\n        await batchOp.confirmation(); // step 5\n    }\n\n")),(0,r.kt)("p",null,"The calling of this method will give this output on ",(0,r.kt)("em",{parentName:"p"},"Tzstats"),":\n",(0,r.kt)("a",{parentName:"p",href:"https://florence.tzstats.com/opNz4g3XTd9oAAyPe4jMiEqXLQ67EfPPTZkXhhvXje8DoMg5D5u/2402084"},"https://florence.tzstats.com/opNz4g3XTd9oAAyPe4jMiEqXLQ67EfPPTZkXhhvXje8DoMg5D5u/2402084")),(0,r.kt)("p",null,"Our three transfer transactions and our contract call are now indeed batched together in an operation."),(0,r.kt)("h1",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Taquito")," facilitates the interactions of developers with the Tezos network: it can read all the data from a blockchain, send transactions, originate a contract...and Dapps can be built with this tool."),(0,r.kt)("p",null,"However, dapps require the ability to manage keys. In our example, there was only a single key to manage. In real-life dapps, each user will want to safely use a key that they owns. That is where ",(0,r.kt)("em",{parentName:"p"},"wallets")," come in play: those tools are built upon ",(0,r.kt)("em",{parentName:"p"},"Taquito")," and make dapps more user-friendly and accessible. ",(0,r.kt)("em",{parentName:"p"},"Taquito")," can also be used along with those wallets."))}l.isMDXComponent=!0}}]);